"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLAPTopicManager = void 0;
const sdk_1 = require("@bsv/sdk");
const isTokenSignatureCorrectlyLinked_js_1 = require("../utils/isTokenSignatureCorrectlyLinked.js");
const isValidTopicOrServiceName_js_1 = require("../utils/isValidTopicOrServiceName.js");
const isAdvertisableURI_js_1 = require("../utils/isAdvertisableURI.js");
const SLAPTopic_docs_js_1 = __importDefault(require("./SLAPTopic.docs.js"));
/**
 * 🤚 SLAP Topic Manager
 * Implements the TopicManager interface for SLAP (Service Lookup Availability Protocol) tokens.
 *
 * The SLAP Topic Manager identifies admissible outputs based on SLAP protocol requirements.
 * SLAP tokens facilitate the advertisement of lookup services availability within the overlay network.
 */
class SLAPTopicManager {
    /**
     * Identifies admissible outputs for SLAP tokens.
     * @param beef - The transaction data in BEEF format.
     * @param previousCoins - The previous coins to consider.
     * @returns A promise that resolves with the admittance instructions.
     */
    async identifyAdmissibleOutputs(beef, previousCoins) {
        const outputsToAdmit = [];
        try {
            const parsedTransaction = sdk_1.Transaction.fromBEEF(beef);
            for (const [i, output] of parsedTransaction.outputs.entries()) {
                try {
                    const result = sdk_1.PushDrop.decode(output.lockingScript);
                    if (result.fields.length !== 5)
                        continue; // SLAP tokens have 5 fields
                    const shipIdentifier = sdk_1.Utils.toUTF8(result.fields[0]);
                    if (shipIdentifier !== 'SLAP')
                        continue; // SLAP identifier must be present
                    const advertisedURI = sdk_1.Utils.toUTF8(result.fields[2]);
                    if (!(0, isAdvertisableURI_js_1.isAdvertisableURI)(advertisedURI))
                        continue; // Advertised URI must be acceptable
                    const topic = sdk_1.Utils.toUTF8(result.fields[3]);
                    if (!(0, isValidTopicOrServiceName_js_1.isValidTopicOrServiceName)(topic))
                        continue; // Topic or service name must be valid
                    if (!topic.startsWith('ls_'))
                        continue; // SLAP only accepts "ls_" (lookup service) advertisements
                    if (!(0, isTokenSignatureCorrectlyLinked_js_1.isTokenSignatureCorrectlyLinked)(result.lockingPublicKey, result.fields))
                        continue; // Signatures must be properly linked
                    outputsToAdmit.push(i);
                }
                catch (error) {
                    // It's common for other outputs to be invalid; no need to log an error here
                    continue;
                }
            }
        }
        catch (error) {
            // Only log an error if no outputs were admitted and no previous coins consumed
            if (outputsToAdmit.length === 0 && (!previousCoins || previousCoins.length === 0)) {
                console.error('🤚 Error identifying admissible outputs:', error);
            }
        }
        // Friendly logging with slappy emojis!
        if (outputsToAdmit.length > 0) {
            console.log(`👏 Admitted ${outputsToAdmit.length} SLAP ${outputsToAdmit.length === 1 ? 'output' : 'outputs'}!`);
        }
        if (previousCoins && previousCoins.length > 0) {
            console.log(`✋ Consumed ${previousCoins.length} previous SLAP ${previousCoins.length === 1 ? 'coin' : 'coins'}!`);
        }
        if (outputsToAdmit.length === 0 && (!previousCoins || previousCoins.length === 0)) {
            console.warn('😕 No SLAP outputs admitted and no previous SLAP coins consumed.');
        }
        return {
            outputsToAdmit,
            coinsToRetain: []
        };
    }
    /**
     * Returns documentation specific to the SLAP topic manager.
     * @returns A promise that resolves to the documentation string.
     */
    async getDocumentation() {
        return SLAPTopic_docs_js_1.default;
    }
    /**
     * Returns metadata associated with this topic manager.
     * @returns A promise that resolves to an object containing metadata.
     */
    async getMetaData() {
        return {
            name: 'SLAP Topic Manager',
            shortDescription: 'Manages SLAP tokens for service lookup availability.'
        };
    }
}
exports.SLAPTopicManager = SLAPTopicManager;
//# sourceMappingURL=SLAPTopicManager.js.map