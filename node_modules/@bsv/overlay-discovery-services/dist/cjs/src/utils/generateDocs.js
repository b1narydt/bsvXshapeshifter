"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const util_1 = require("util");
const path = __importStar(require("path"));
const execPromise = (0, util_1.promisify)(child_process_1.exec);
const docs = [
    {
        input: './src/SHIP/SHIPTopicManager.ts',
        output: './docs/SHIP/ship-topic-manager.md'
    },
    {
        input: './src/SHIP/SHIPLookupService.ts',
        output: './docs/SHIP/ship-lookup-service.md'
    },
    {
        input: './src/SHIP/SHIPStorage.ts',
        output: './docs/SHIP/ship-storage.md'
    },
    {
        input: './src/SLAP/SLAPTopicManager.ts',
        output: './docs/SLAP/slap-topic-manager.md'
    },
    {
        input: './src/SLAP/SLAPLookupService.ts',
        output: './docs/SLAP/slap-lookup-service.md'
    },
    {
        input: './src/SLAP/SLAPStorage.ts',
        output: './docs/SLAP/slap-storage.md'
    }
];
// Helper function for generating updated documentation
const generateDocs = async () => {
    for (const doc of docs) {
        const command = `npx ts2md --inputFilename ${path.resolve(doc.input)} --outputFilename ${path.resolve(doc.output)} --firstHeadingLevel 2 --noTitle true --readmeMerge true`;
        try {
            const { stdout, stderr } = await execPromise(command);
            console.log(`stdout: ${stdout}`);
            console.error(`stderr: ${stderr}`);
        }
        catch (error) {
            console.error(`Error generating documentation for ${doc.input}:`, error);
        }
    }
};
generateDocs().then(() => console.log('Documentation generation complete')).catch(error => console.error('Error:', error));
//# sourceMappingURL=generateDocs.js.map