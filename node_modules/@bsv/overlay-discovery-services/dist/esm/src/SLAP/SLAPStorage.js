/**
 * Implements a storage engine for SLAP protocol
 */
export class SLAPStorage {
    db;
    slapRecords;
    /**
     * Constructs a new SLAPStorage instance
     * @param {Db} db - connected mongo database instance
     */
    constructor(db) {
        this.db = db;
        this.slapRecords = db.collection('slapRecords');
    }
    /**
     * Ensures the necessary indexes are created for the collections.
     */
    async ensureIndexes() {
        await this.slapRecords.createIndex({ domain: 1, service: 1 });
    }
    /**
     * Stores a SLAP record
     * @param {string} txid transaction id
     * @param {number} outputIndex index of the UTXO
     * @param {string} identityKey identity key
     * @param {string} domain domain name
     * @param {string} service service name
     */
    async storeSLAPRecord(txid, outputIndex, identityKey, domain, service) {
        await this.slapRecords.insertOne({
            txid,
            outputIndex,
            identityKey,
            domain,
            service,
            createdAt: new Date()
        });
    }
    /**
     * Deletes a SLAP record
     * @param {string} txid transaction id
     * @param {number} outputIndex index of the UTXO
     */
    async deleteSLAPRecord(txid, outputIndex) {
        await this.slapRecords.deleteOne({ txid, outputIndex });
    }
    /**
     * Finds SLAP records based on a given query object.
     * @param {Object} query The query object which may contain properties for domain or service.
     * @returns {Promise<UTXOReference[]>} returns matching UTXO references
     */
    async findRecord(query) {
        return await this.slapRecords.find(query)
            .project({ txid: 1, outputIndex: 1 })
            .toArray()
            .then(results => results.map(record => ({
            txid: record.txid,
            outputIndex: record.outputIndex
        })));
    }
    /**
    * Returns all results tracked by the overlay
    * @returns {Promise<UTXOReference[]>} returns matching UTXO references
    */
    async findAll() {
        return await this.slapRecords.find({})
            .project({ txid: 1, outputIndex: 1 })
            .toArray()
            .then(results => results.map(slapRecords => ({
            txid: slapRecords.txid,
            outputIndex: slapRecords.outputIndex
        })));
    }
}
//# sourceMappingURL=SLAPStorage.js.map