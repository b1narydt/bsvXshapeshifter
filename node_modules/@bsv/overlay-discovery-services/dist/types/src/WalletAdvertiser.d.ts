import { Script, TaggedBEEF } from '@bsv/sdk';
import { Advertisement, Engine, AdvertisementData, Advertiser } from '@bsv/overlay';
/**
 * Implements the Advertiser interface for managing SHIP and SLAP advertisements using a Wallet.
 */
export declare class WalletAdvertiser implements Advertiser {
    chain: 'main' | 'test';
    privateKey: string;
    storageURL: string;
    advertisableURI: string;
    private readonly wallet;
    private readonly storageManager;
    private initialized;
    private engine;
    /**
     * Constructs a new WalletAdvertiser instance.
     * @param chain - The blockchain (main or test) where this advertiser is advertising
     * @param privateKey - The private key used for signing transactions.
     * @param storageURL - The URL of the UTXO storage server for the Wallet.
     * @param advertisableURI - The advertisable URI where services are made available.
     */
    constructor(chain: 'main' | 'test', privateKey: string, storageURL: string, advertisableURI: string);
    /**
     * Initializes the wallet asynchronously and binds the advertiser with its Engine.
     *
     * Sets the Engine instance to be used by this WalletAdvertiser. This method allows for late
     * binding of the Engine, thus avoiding circular dependencies during instantiation. The Engine
     * provides necessary context with the relevant topic managers and lookup services,
     * as well as the lookup function used for querying advertisements.
     *
     * @param engine The Engine instance to be associated with this NinjaAdvertiser. The Engine should
     * be fully initialized before being passed to this method to ensure all functionalities are available.
     */
    initWithEngine(engine: Engine): Promise<void>;
    /**
     * Utility function to create multiple advertisements in a single transaction.
     * @param adsData Array of advertisement details.
     * @returns The Tagged BEEF for the created advertisement
     * @throws Will throw an error if the locking key is invalid.
     */
    createAdvertisements(adsData: AdvertisementData[]): Promise<TaggedBEEF>;
    /**
     * Finds all SHIP advertisements for a given topic.
     * @param topic - The topic name to search for.
     * @returns A promise that resolves to an array of SHIP advertisements.
     */
    findAllAdvertisements(protocol: 'SHIP' | 'SLAP'): Promise<Advertisement[]>;
    /**
     * Revokes an existing advertisement.
     * @param advertisements - The advertisements to revoke, either SHIP or SLAP.
     * @returns A promise that resolves to the revoked advertisement as TaggedBEEF.
     */
    revokeAdvertisements(advertisements: Advertisement[]): Promise<TaggedBEEF>;
    /**
     * Parses an advertisement from the provided output script.
     * @param outputScript - The output script to parse.
     * @returns An Advertisement object if the script matches the expected format, otherwise throws an error.
     */
    parseAdvertisement(outputScript: Script): Advertisement;
}
//# sourceMappingURL=WalletAdvertiser.d.ts.map