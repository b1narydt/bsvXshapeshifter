import { TaggedBEEF } from '@bsv/overlay';
import { Script } from '@bsv/sdk';
import { AdvertisementData } from '@bsv/overlay';
import { Advertisement, Engine } from '@bsv/overlay';
/**
 * Implements the Advertiser interface for managing SHIP and SLAP advertisements using a Ninja.
 */
export declare class LegacyNinjaAdvertiser {
    privateKey: string;
    dojoURL: string;
    hostingDomain: string;
    private readonly ninja;
    private engine;
    /**
     * Constructs a new NinjaAdvertiser instance.
     * @param privateKey - The private key used for signing transactions.
     * @param dojoURL - The URL of the dojo server for the Ninja.
     * @param hostingDomain - The base server URL for the NinjaAdvertiser.
     */
    constructor(privateKey: string, dojoURL: string, hostingDomain: string);
    /**
     * Sets the Engine instance to be used by this NinjaAdvertiser. This method allows for late
     * binding of the Engine, thus avoiding circular dependencies during instantiation. The Engine
     * provides necessary context with the relevant topic managers and lookup services,
     * as well as the lookup function used for querying advertisements.
     *
     * @param engine The Engine instance to be associated with this NinjaAdvertiser. The Engine should
     * be fully initialized before being passed to this method to ensure all functionalities are available.
     */
    setLookupEngine(engine: Engine): void;
    /**
     * Utility function to create multiple advertisements in a single transaction.
     * @param privateKey The private key used to sign the transaction.
     * @param adsData Array of advertisement details.
     * @param ninja Ninja instance for transaction processing.
     * @param note A note attached to the transaction.
     * @returns A promise that resolves to an array of TaggedBEEF objects.
     * @throws Will throw an error if the locking key is invalid.
     */
    createAdvertisements(adsData: AdvertisementData[]): Promise<TaggedBEEF>;
    /**
     * Finds all SHIP advertisements for a given topic.
     * @param topic - The topic name to search for.
     * @returns A promise that resolves to an array of SHIP advertisements.
     */
    findAllAdvertisements(protocol: 'SHIP' | 'SLAP'): Promise<Advertisement[]>;
    /**
     * Revokes an existing advertisement.
     * @param advertisements - The advertisements to revoke, either SHIP or SLAP.
     * @returns A promise that resolves to the revoked advertisement as TaggedBEEF.
     */
    revokeAdvertisements(advertisements: Advertisement[]): Promise<TaggedBEEF>;
    /**
     * Parses an advertisement from the provided output script.
     * @param outputScript - The output script to parse.
     * @returns An Advertisement object if the script matches the expected format, otherwise throws an error.
     */
    parseAdvertisement(outputScript: Script): Advertisement;
}
//# sourceMappingURL=LegacyNinjaAdvertiser.d.ts.map