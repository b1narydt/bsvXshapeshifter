import { Db } from 'mongodb';
import { UTXOReference } from '../types.js';
/**
 * Implements a storage engine for SHIP protocol
 */
export declare class SHIPStorage {
    private readonly db;
    private readonly shipRecords;
    /**
     * Constructs a new SHIPStorage instance
     * @param {Db} db - connected mongo database instance
     */
    constructor(db: Db);
    /**
     * Ensures the necessary indexes are created for the collections.
     */
    ensureIndexes(): Promise<void>;
    /**
     * Stores a SHIP record
     * @param {string} txid transaction id
     * @param {number} outputIndex index of the UTXO
     * @param {string} identityKey identity key
     * @param {string} domain domain name
     * @param {string} topic topic name
     */
    storeSHIPRecord(txid: string, outputIndex: number, identityKey: string, domain: string, topic: string): Promise<void>;
    /**
     * Deletes a SHIP record
     * @param {string} txid transaction id
     * @param {number} outputIndex index of the UTXO
     */
    deleteSHIPRecord(txid: string, outputIndex: number): Promise<void>;
    /**
     * Finds SHIP records based on a given query object.
     * @param {Object} query The query object which may contain properties for domain or topics.
     * @returns {Promise<UTXOReference[]>} Returns matching UTXO references.
     */
    findRecord(query: {
        domain?: string;
        topics?: string[];
    }): Promise<UTXOReference[]>;
    /**
   * Returns all results tracked by the overlay
   * @returns {Promise<UTXOReference[]>} returns matching UTXO references
   */
    findAll(): Promise<UTXOReference[]>;
}
//# sourceMappingURL=SHIPStorage.d.ts.map