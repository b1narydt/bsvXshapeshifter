"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletSettingsManager = exports.TESTNET_DEFAULT_SETTINGS = exports.DEFAULT_SETTINGS = void 0;
const sdk_1 = require("@bsv/sdk");
const PROTOCOL_ID = [2, 'wallet settings'];
const KEY_ID = '1';
const SETTINGS_BASKET = 'wallet settings';
const TOKEN_AMOUNT = 1;
// Defaults can be overridden as needed
exports.DEFAULT_SETTINGS = {
    trustSettings: {
        trustLevel: 2,
        trustedCertifiers: [
            {
                name: 'Babbage Trust Services',
                description: 'Resolves identity information for Babbage-run APIs and Bitcoin infrastructure.',
                iconUrl: 'https://projectbabbage.com/favicon.ico',
                identityKey: '028703956178067ea7ca405111f1ca698290a0112a3d7cf3d843e195bf58a7cfa6',
                trust: 4
            },
            {
                name: 'IdentiCert',
                description: 'Certifies legal first and last name, and photos',
                iconUrl: 'https://identicert.me/favicon.ico',
                trust: 5,
                identityKey: '0295bf1c7842d14babf60daf2c733956c331f9dcb2c79e41f85fd1dda6a3fa4549'
            },
            {
                name: 'SocialCert',
                description: 'Certifies social media handles, phone numbers and emails',
                iconUrl: 'https://socialcert.net/favicon.ico',
                trust: 3,
                identityKey: '03285263f06139b66fb27f51cf8a92e9dd007c4c4b83876ad6c3e7028db450a4c2'
            }
        ]
    },
    theme: { mode: 'dark' }
};
// Mapping of certifier names to their testnet identity keys
const TESTNET_IDENTITY_KEYS = {
    'Babbage Trust Services': '03d0b36b5c98b000ec9ffed9a2cf005e279244edf6a19cf90545cdebe873162761',
    IdentiCert: '036dc48522aba1705afbb43df3c04dbd1da373b6154341a875bceaa2a3e7f21528',
    SocialCert: '02cf6cdf466951d8dfc9e7c9367511d0007ed6fba35ed42d425cc412fd6cfd4a17'
};
// Define defaults that can be imported for a testnet environment
exports.TESTNET_DEFAULT_SETTINGS = {
    ...exports.DEFAULT_SETTINGS,
    trustSettings: {
        ...exports.DEFAULT_SETTINGS.trustSettings,
        trustedCertifiers: exports.DEFAULT_SETTINGS.trustSettings.trustedCertifiers.map(certifier => ({
            ...certifier,
            // Use the testnet key if provided, otherwise fallback to the default
            identityKey: TESTNET_IDENTITY_KEYS[certifier.name] || certifier.identityKey
        }))
    }
};
/**
 * Manages wallet settings
 */
class WalletSettingsManager {
    constructor(wallet, config = {
        defaultSettings: exports.DEFAULT_SETTINGS
    }) {
        this.wallet = wallet;
        this.config = config;
    }
    /**
     * Returns a user's wallet settings
     *
     * @returns - Wallet settings object
     */
    async get() {
        // List outputs in the 'wallet-settings' basket
        const results = await this.wallet.listOutputs({
            basket: SETTINGS_BASKET,
            include: 'locking scripts',
            limit: 1 // There should only be one settings token
        });
        // Return defaults if no settings token is found
        if (!results.outputs.length) {
            return this.config.defaultSettings;
        }
        const { fields } = sdk_1.PushDrop.decode(sdk_1.LockingScript.fromHex(results.outputs[0].lockingScript));
        // Parse and return settings token
        return JSON.parse(sdk_1.Utils.toUTF8(fields[0]));
    }
    /**
     * Creates (or updates) the user's settings token.
     *
     * @param settings - The wallet settings to be stored.
     */
    async set(settings) {
        const pushdrop = new sdk_1.PushDrop(this.wallet);
        // Build the new locking script with the updated settings JSON.
        const lockingScript = await pushdrop.lock([sdk_1.Utils.toArray(JSON.stringify(settings), 'utf8')], PROTOCOL_ID, KEY_ID, 'self');
        // Consume any existing token and create a new one with the new locking script.
        await this.updateToken(lockingScript);
    }
    /**
     * Deletes the user's settings token.
     */
    async delete() {
        // Consume the token; if none exists, consumeToken simply returns.
        await this.updateToken();
    }
    /**
     * Updates a settings token. Any previous token is consumed, and if a new locking script
     * is provided, it replaces what (if anything) was there before.
     *
     * @param newLockingScript - Optional locking script for replacing the settings token.
     * @returns {Promise<boolean>} - True if operation succeeded, throws an error otherwise.
     */
    async updateToken(newLockingScript) {
        const pushdrop = new sdk_1.PushDrop(this.wallet);
        // 1. List the existing token UTXO(s) for the settings basket.
        const existingUtxos = await this.wallet.listOutputs({
            basket: SETTINGS_BASKET,
            include: 'entire transactions',
            limit: 1
        });
        // This is the "create a new token" path â€” no signAction, just a new locking script.
        if (!existingUtxos.outputs.length) {
            if (!newLockingScript) {
                // The intention was to clear the token, but no tokn was found to clear.
                // Thus, we are done.
                return true;
            }
            await this.wallet.createAction({
                description: 'Create a user settings token',
                outputs: [
                    {
                        satoshis: TOKEN_AMOUNT,
                        lockingScript: newLockingScript.toHex(),
                        outputDescription: 'Wallet settings token',
                        basket: SETTINGS_BASKET
                    }
                ],
                options: {
                    randomizeOutputs: false
                }
            });
            return true;
        }
        // 2. Prepare the token UTXO for consumption.
        const tokenOutput = existingUtxos.outputs[0];
        const inputToConsume = {
            outpoint: tokenOutput.outpoint,
            unlockingScriptLength: 73,
            inputDescription: 'Consume old wallet settings token'
        };
        // 3. Build the outputs array: if a new locking script is provided, add an output.
        const outputs = newLockingScript
            ? [
                {
                    satoshis: TOKEN_AMOUNT,
                    lockingScript: newLockingScript.toHex(),
                    outputDescription: 'Wallet settings token',
                    basket: SETTINGS_BASKET
                }
            ]
            : [];
        // 4. Create a signable transaction action using the inputs and (optionally) outputs.
        const { signableTransaction } = await this.wallet.createAction({
            description: `${newLockingScript ? 'Update' : 'Delete'} a user settings token`,
            inputBEEF: existingUtxos.BEEF,
            inputs: [inputToConsume], // input index 0
            outputs,
            options: {
                randomizeOutputs: false
            }
        });
        const tx = sdk_1.Transaction.fromBEEF(signableTransaction.tx);
        // 5. Build and sign the unlocking script for the token being consumed.
        const unlocker = pushdrop.unlock(PROTOCOL_ID, KEY_ID, 'self');
        const unlockingScript = await unlocker.sign(tx, 0);
        // 6. Sign the transaction using our unlocking script.
        await this.wallet.signAction({
            reference: signableTransaction.reference,
            spends: {
                0: {
                    unlockingScript: unlockingScript.toHex()
                }
            }
        });
        return true;
    }
}
exports.WalletSettingsManager = WalletSettingsManager;
//# sourceMappingURL=WalletSettingsManager.js.map