import { PubKeyHex, WalletInterface } from '@bsv/sdk';
export interface Certifier {
    name: string;
    description: string;
    identityKey: PubKeyHex;
    trust: number;
    iconUrl?: string;
    baseURL?: string;
}
export interface TrustSettings {
    trustLevel: number;
    trustedCertifiers: Certifier[];
}
export interface WalletTheme {
    mode: string;
}
export interface WalletSettings {
    trustSettings: TrustSettings;
    theme?: WalletTheme;
    currency?: string;
}
export interface WalletSettingsManagerConfig {
    defaultSettings: WalletSettings;
}
export declare const DEFAULT_SETTINGS: WalletSettings;
export declare const TESTNET_DEFAULT_SETTINGS: WalletSettings;
/**
 * Manages wallet settings
 */
export declare class WalletSettingsManager {
    private wallet;
    private config;
    constructor(wallet: WalletInterface, config?: WalletSettingsManagerConfig);
    /**
     * Returns a user's wallet settings
     *
     * @returns - Wallet settings object
     */
    get(): Promise<WalletSettings>;
    /**
     * Creates (or updates) the user's settings token.
     *
     * @param settings - The wallet settings to be stored.
     */
    set(settings: WalletSettings): Promise<void>;
    /**
     * Deletes the user's settings token.
     */
    delete(): Promise<void>;
    /**
     * Updates a settings token. Any previous token is consumed, and if a new locking script
     * is provided, it replaces what (if anything) was there before.
     *
     * @param newLockingScript - Optional locking script for replacing the settings token.
     * @returns {Promise<boolean>} - True if operation succeeded, throws an error otherwise.
     */
    private updateToken;
}
//# sourceMappingURL=WalletSettingsManager.d.ts.map