import { Beef } from '@bsv/sdk';
import { EntityProvenTxReq, sdk, StorageProvider, TableProvenTx, TableProvenTxReq } from '../../index.client';
export declare function processAction(storage: StorageProvider, auth: sdk.AuthId, args: sdk.StorageProcessActionArgs): Promise<sdk.StorageProcessActionResults>;
export interface CommitNewTxResults {
    req: EntityProvenTxReq;
    log?: string;
}
export interface GetReqsAndBeefDetail {
    txid: string;
    req?: TableProvenTxReq;
    proven?: TableProvenTx;
    status: 'readyToSend' | 'alreadySent' | 'error' | 'unknown';
    error?: string;
}
export interface GetReqsAndBeefResult {
    beef: Beef;
    details: GetReqsAndBeefDetail[];
}
export interface PostBeefResultForTxidApi {
    txid: string;
    /**
     * 'success' - The transaction was accepted for processing
     */
    status: 'success' | 'error';
    /**
     * if true, the transaction was already known to this service. Usually treat as a success.
     *
     * Potentially stop posting to additional transaction processors.
     */
    alreadyKnown?: boolean;
    blockHash?: string;
    blockHeight?: number;
    merklePath?: string;
}
//# sourceMappingURL=processAction.d.ts.map