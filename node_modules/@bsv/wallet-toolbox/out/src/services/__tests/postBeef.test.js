"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sdk_1 = require("@bsv/sdk");
const index_client_1 = require("../../index.client");
const TestUtilsWalletStorage_1 = require("../../../test/utils/TestUtilsWalletStorage");
const index_all_1 = require("../../index.all");
describe('postBeef service tests', () => {
    jest.setTimeout(99999999);
    test('0 postBeef mainnet', async () => {
        if (index_all_1.Setup.noEnv('main'))
            return;
        const options = index_client_1.Services.createDefaultOptions('main');
        const services = new index_client_1.Services(options);
        await postBeefTest(services);
    });
    test('1 postBeef testnet', async () => {
        if (index_all_1.Setup.noEnv('test'))
            return;
        const options = index_client_1.Services.createDefaultOptions('test');
        const services = new index_client_1.Services(options);
        await postBeefTest(services);
    });
});
async function postBeefTest(services) {
    const chain = services.chain;
    if (index_all_1.Setup.noEnv(chain))
        return;
    const c = await TestUtilsWalletStorage_1._tu.createNoSendTxPair(chain);
    const txids = [c.txidDo, c.txidUndo];
    const [r] = await services.postBeef(c.beef, txids);
    expect(r.status).toBe('success');
    for (const txid of txids) {
        const tr = r.txidResults.find(tx => tx.txid === txid);
        expect(tr).not.toBeUndefined();
        expect(tr.status).toBe('success');
    }
    // replace Undo transaction with double spend transaction and send again.
    const beef2 = c.beef.clone();
    beef2.txs[beef2.txs.length - 1] = sdk_1.BeefTx.fromTx(c.doubleSpendTx);
    const txids2 = [c.txidDo, c.doubleSpendTx.id('hex')];
    const [r2] = await services.postBeef(beef2, txids2);
    expect(r2.status).toBe('error');
    for (const txid of txids2) {
        const tr = r2.txidResults.find(tx => tx.txid === txid);
        expect(tr).not.toBeUndefined();
        if (txid === c.txidDo) {
            expect(tr.status).toBe('success');
        }
        else {
            expect(tr.status).toBe('error');
            expect(tr.doubleSpend).toBe(true);
            expect(tr.competingTxs).toEqual([c.txidUndo]);
        }
    }
}
//# sourceMappingURL=postBeef.test.js.map