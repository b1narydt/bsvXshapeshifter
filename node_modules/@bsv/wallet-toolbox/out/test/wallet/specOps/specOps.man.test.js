"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
const sdk_1 = require("../../../src/sdk");
const TestUtilsWalletStorage_1 = require("../../utils/TestUtilsWalletStorage");
describe('specOps tests', () => {
    jest.setTimeout(99999999);
    test('00', () => { });
    if (TestUtilsWalletStorage_1._tu.noTestEnv('test'))
        return;
    if (TestUtilsWalletStorage_1._tu.noTestEnv('main'))
        return;
    test('0 wallet balance specOp', async () => {
        const setup = await createSetup('test');
        const r = await setup.wallet.listOutputs({ basket: sdk_1.specOpWalletBalance });
        expect(r.totalOutputs > 0).toBe(true);
        expect(r.outputs.length === 0).toBe(true);
        await setup.wallet.destroy();
    });
    test('1 wallet invalid change outputs', async () => {
        const setup = await createSetup('test');
        const r = await setup.wallet.listOutputs({
            basket: sdk_1.specOpInvalidChange
            //tags: ['release', 'foobar']
        });
        expect(r.totalOutputs).toBe(0);
        expect(r.outputs.length).toBe(0);
        await setup.wallet.destroy();
    });
    test('2 update default basket params', async () => {
        const setup = await createSetup('test');
        const before = (0, src_1.verifyOne)(await setup.activeStorage.findOutputBaskets({
            partial: { userId: setup.userId, name: 'default' }
        }));
        const r = await setup.wallet.listOutputs({
            basket: sdk_1.specOpSetWalletChangeParams,
            tags: ['33', '6']
        });
        const after = (0, src_1.verifyOne)(await setup.activeStorage.findOutputBaskets({
            partial: { userId: setup.userId, name: 'default' }
        }));
        expect(r.totalOutputs).toBe(0);
        expect(r.outputs.length).toBe(0);
        expect(after.minimumDesiredUTXOValue).toBe(6);
        expect(after.numberOfDesiredUTXOs).toBe(33);
        // Restore original values...
        await setup.wallet.listOutputs({
            basket: sdk_1.specOpSetWalletChangeParams,
            tags: [before.numberOfDesiredUTXOs.toString(), before.minimumDesiredUTXOValue.toString()]
        });
        await setup.wallet.destroy();
    });
});
async function createSetup(chain) {
    const env = TestUtilsWalletStorage_1._tu.getEnv(chain);
    if (!env.testIdentityKey)
        throw new src_1.sdk.WERR_INVALID_PARAMETER('env.testIdentityKey', 'valid');
    if (!env.testFilePath)
        throw new src_1.sdk.WERR_INVALID_PARAMETER('env.testFilePath', 'valid');
    const setup = await TestUtilsWalletStorage_1._tu.createTestWallet({
        chain,
        rootKeyHex: env.devKeys[env.testIdentityKey],
        filePath: env.testFilePath,
        setActiveClient: false,
        addLocalBackup: false,
        useMySQLConnectionForClient: false
    });
    console.log(`ACTIVE STORAGE: ${setup.storage.getActiveStoreName()}`);
    return setup;
}
//# sourceMappingURL=specOps.man.test.js.map